diff --git a/sserialize/Static/TrieNode.h b/sserialize/Static/TrieNode.h
index 5c860d3..340a664 100644
--- a/sserialize/Static/TrieNode.h
+++ b/sserialize/Static/TrieNode.h
@@ -29,6 +29,7 @@ public:
 
 	~TrieNode() {}
 	inline uint16_t childCount() const { return priv()->childCount();}
+	///char width in bits
 	inline uint8_t charWidth() const { return priv()->charWidth(); }
 	inline uint32_t childCharAt(const uint16_t pos) const { return priv()->childCharAt(pos);}
 	inline uint8_t strLen() const { return priv()->strLen(); }
diff --git a/sserialize/Static/TrieNodePrivates/CompactTrieNodePrivate.cpp b/sserialize/Static/TrieNodePrivates/CompactTrieNodePrivate.cpp
index ca3814a..1992e86 100644
--- a/sserialize/Static/TrieNodePrivates/CompactTrieNodePrivate.cpp
+++ b/sserialize/Static/TrieNodePrivates/CompactTrieNodePrivate.cpp
@@ -10,107 +10,111 @@
 
 #include "../TrieNode.h"
 
-#define CHILDPTR_STRIPE_SIZE 32
-
 namespace sserialize {
 namespace Static {
 
 CompactTrieNodePrivate::CompactTrieNodePrivate(const UByteArrayAdapter & nodeData) :
 m_data(nodeData)
 {
-	UByteArrayAdapter current = m_data;
-// 	uint8_t m_header = current.at(0);
-	uint8_t arrayInfoLen;
-
-	if (current.at(0) & 0x20) { //carry-bit is set
-		m_childCount = current.getUint16(1);
-		m_childCount = m_childCount & 0xFFF;
-		arrayInfoLen = 3;
-	}
-	else {
-		m_childCount = current.at(1);
-		m_childCount = m_childCount & 0xF;
-		arrayInfoLen = 2;
+	m_header = m_data.getUint32();
+	m_childCount = m_header & HM_CHILD_COUNT;
+	if ( !((m_header >> HS_CHILD_COUNT_FLAG) & HM_CHILD_COUNT_FLAG) ) {
+		m_childCount >>= 8;
+		m_data.decGetPtr(1);
 	}
-	m_strLen = current.at(arrayInfoLen);
-	m_strStart = arrayInfoLen+1;
-
 	
-	uint32_t curOffSet = arrayInfoLen+1+m_strLen;
 	
+	m_strLen = m_data.getUint8();
 	if (m_childCount > 0) {
-		m_childArrayStart = curOffSet;
-		
-		curOffSet += charWidth()*m_childCount;
-		m_childPointerArrayStart = curOffSet;
-		
-		//correct offset for indexPtr
-		curOffSet += (m_childCount+1)*2;
-	}
-	else {
-		m_childArrayStart = 0;
-		m_childPointerArrayStart = 0;
+		m_childPtrBeginOffset = m_data.getVlPackedUint32();
+		if (m_childCount > 2)
+			m_childPtrDiff = m_data.getVlPackedUint32();
 	}
-	m_indexPtrStart = curOffSet;
 
-	curOffSet += CompactUintArray::minStorageBytes(indexArrBpn(), popCount((unsigned int) indexTypes()));
+	m_strStart = m_data.tellGetPtr();
+	m_data.incGetPtr(m_strLen);
+
+	m_childArrayStart = m_data.tellPutPtr();
+	m_data.incGetPtr( sserialize::CompactUintArray::minStorageBytes(charWidth(), childCount()) );
+	
+	m_childPointerArrayStart = m_data.tellGetPtr();
+	if (childCount() > 1)
+		m_data.incGetPtr( sserialize::CompactUintArray::minStorageBytes(childPtrBits(), childCount()-1) );
+	m_indexPtrStart = m_data.tellGetPtr();
+	
+	if (indexTypes())
+		m_data.incGetPtr( sserialize::CompactUintArray::minStorageBytes(indexPtrBits(), popCount(indexTypes())) );
 	
-	m_myEndPtr = curOffSet;
+	m_myEndPtr = m_data.tellGetPtr();
 }
 
 uint32_t CompactTrieNodePrivate::getChildPtrBeginOffset() const {
 	return m_childPointerArrayStart;
 }
 
+uint8_t CompactTrieNodePrivate::charWidth() const {
+	return (m_header >> HS_CHILD_CHAR_BITS) &  HM_CHILD_CHAR_BITS;
+}
+
+uint8_t CompactTrieNodePrivate::childPtrBits() const {
+	return (m_header >> HS_CHILD_PTR_BITS) & HM_CHILD_PTR_BITS;
+}
+
+bool CompactTrieNodePrivate::hasMergeIndex() const {
+	return (m_header >> HS_MERGE_INDEX) & HM_MERGE_INDEX;
+}
+
+uint8_t CompactTrieNodePrivate::indexPtrBits() const {
+	return (m_header >> HS_INDEX_BITS) & HM_INDEX_BITS;
+}
+
+TrieNodePrivate::IndexTypes CompactTrieNodePrivate::indexTypes() const {
+	return (IndexTypes) ((m_header >> HS_INDEX_TYPES) & HM_INDEX_TYPES);
+}
+
+
 uint32_t CompactTrieNodePrivate::childCharAt(uint16_t pos) const {
 	if (m_childCount == 0)
 		return 0;
 	if (pos >= m_childCount) {
 		pos = m_childCount-1;
 	}
-	if (charWidth() == 1) {
-		return m_data.at(m_childArrayStart+pos);
-	}
-	else {
-		return m_data.getUint16(m_childArrayStart+2*pos);
-	}
+	CompactUintArray arr(m_data + m_childArrayStart, charWidth());
+	return arr.at(pos);
 }
 
 uint32_t CompactTrieNodePrivate::getExactIndexPtr() const {
-	CompactUintArray arr(m_data + m_indexPtrStart, indexArrBpn());
+	CompactUintArray arr(m_data + m_indexPtrStart, indexPtrBits());
 	return arr.at(0);
 }
 
 uint32_t CompactTrieNodePrivate::getPrefixIndexPtr() const {
-	CompactUintArray arr(m_data + m_indexPtrStart, indexArrBpn());
+	CompactUintArray arr(m_data + m_indexPtrStart, indexPtrBits());
 	uint32_t offSet = popCount( (indexTypes() & 0x1) );
 	return arr.at(offSet);
 }
 
 uint32_t CompactTrieNodePrivate::getSuffixIndexPtr() const {
-	CompactUintArray arr(m_data + m_indexPtrStart, indexArrBpn());
+	CompactUintArray arr(m_data + m_indexPtrStart, indexPtrBits());
 	uint32_t offSet = popCount( (indexTypes() & 0x3) );
 	return arr.at(offSet);
 }
 
 uint32_t CompactTrieNodePrivate::getSuffixPrefixIndexPtr() const {
-	CompactUintArray arr(m_data + m_indexPtrStart, indexArrBpn());
+	CompactUintArray arr(m_data + m_indexPtrStart, indexPtrBits());
 	uint32_t offSet = popCount( (indexTypes() & 0x7) );
 	return arr.at(offSet);
 }
 
 uint32_t CompactTrieNodePrivate::getChildPtr(uint32_t pos) const {
-	if (m_childCount == 0) return 0;
-	if (pos >= m_childCount) pos = (m_childCount-1);
-	//find our offset child and it's offset
-	uint32_t baseOffset = m_data.getUint32(m_childPointerArrayStart);
+	if (m_childCount == 0)
+		return 0;
+	if (pos >= m_childCount)
+		pos = (m_childCount-1);
 	if (pos == 0)
-		return baseOffset;
-	for(unsigned int i = CHILDPTR_STRIPE_SIZE; i < pos; i+=CHILDPTR_STRIPE_SIZE) {
-		baseOffset += m_data.getUint16(m_childPointerArrayStart+2+2*i); 
-	}
-	uint32_t newOf = m_data.getUint16(m_childPointerArrayStart+2+2*pos)+baseOffset; 
-	return newOf;
+		return m_childPtrBeginOffset;
+	CompactUintArray arr(m_data + m_childPointerArrayStart, childPtrBits());
+	return m_childPtrBeginOffset + arr.at(pos-1) + m_childPtrDiff*pos;
 }
 
 UByteArrayAdapter CompactTrieNodePrivate::strData() const {
@@ -125,15 +129,8 @@ std::string CompactTrieNodePrivate::str() const {
 }
 
 int16_t CompactTrieNodePrivate::posOfChar(uint32_t key) const {
-	uint8_t charWidth = this->charWidth();
-	if (key > 0xFFFF || (charWidth == 1 && key > 0xFF))
-		return -1;
-	if (charWidth == 1) {
-		return findKeyInArray<1>(m_data+m_childArrayStart, m_childCount, static_cast<uint8_t>(key));
-	}
-	else { //arrayCharSize==2
-		return findKeyInArray_uint16<2>(m_data+m_childArrayStart, m_childCount, key);
-	}
+	CompactUintArray arr(m_data+m_childArrayStart, charWidth());
+	return arr.findSorted(key, childCount());
 }
 
 TrieNodePrivate* CompactTrieNodePrivate::childAt(uint16_t pos) const {
@@ -168,10 +165,9 @@ uint32_t CompactTrieNodePrivate::getStorageSize() const {
 }
 
 uint32_t CompactTrieNodePrivate::getHeaderStorageSize() const {
-	if (m_data.at(0) & 0x20)
-		return 3;
-	else
-		return 2;
+	if ((m_header >> HS_CHILD_COUNT_FLAG) & HM_CHILD_COUNT_FLAG)
+		return 4;
+	return 3;
 }
 
 
@@ -180,133 +176,71 @@ uint32_t CompactTrieNodePrivate::getNodeStringStorageSize() const {
 }
 
 uint32_t CompactTrieNodePrivate::getChildPtrStorageSize() const {
-	return (m_childCount > 0 ? (m_childCount+1)*2 : 0);
+	uint32_t size = vl_pack_uint32_t_size(m_childPtrBeginOffset);
+	size += vl_pack_uint32_t_size(m_childPtrDiff);
+	if (childCount() > 1)
+		size += CompactUintArray::minStorageBytes(childPtrBits(), childCount());
+	return size;
 }
 
 uint32_t CompactTrieNodePrivate::getChildCharStorageSize() const {
-	return charWidth()*m_childCount;
+	return CompactUintArray::minStorageBytes(charWidth(), childCount());
 }
 
 uint32_t CompactTrieNodePrivate::getIndexPtrStorageSize() const {
-	return CompactUintArray::minStorageBytes(indexArrBpn(), popCount( indexTypes() ) );
+	return CompactUintArray::minStorageBytes(indexPtrBits(), popCount( indexTypes() ) );
 }
 
 CompactStaticTrieCreationNode::CompactStaticTrieCreationNode(const UByteArrayAdapter & nodeData) : m_node(nodeData), m_data(nodeData) {};
 
-bool CompactStaticTrieCreationNode::setChildPointer(uint32_t childNum, uint32_t offSetFromBeginning) {
-	uint32_t childPtrStripeCount = CHILDPTR_STRIPE_SIZE; //TODO: paramtrise this
 
-	if (childNum == 0) { //this is the first child
-		m_data.putUint32(m_node.getChildPtrBeginOffset(), offSetFromBeginning);
+uint32_t smallestGap(const std::vector<uint32_t> & src) {
+	if (src.size() < 2)
+		return 0;
+	uint32_t o = std::numeric_limits<uint32_t>::max();
+	std::vector<uint32_t>::const_iterator end(src.end());
+	std::vector<uint32_t>::const_iterator prev(src.begin());
+	std::vector<uint32_t>::const_iterator ahead(prev+1);
+	for(; ahead != end; ++ahead, ++prev) {
+		o = std::min<uint32_t>(*ahead-*prev, o);
 	}
-	else {
-		//Get the baseOffset for our current node
-		uint32_t summedNodeOffset = 0;
-		uint32_t childPtrOffset = m_node.getChildPtrBeginOffset();
-		for(unsigned int i = 0; i < childNum; i+=childPtrStripeCount) {
-			if (i==0) {
-				summedNodeOffset += m_data.getUint32(childPtrOffset);
-			}
-			else {
-				summedNodeOffset += m_data.getUint16(childPtrOffset+2+2*i);
-			}
-		}
-		uint32_t myOffset = offSetFromBeginning-summedNodeOffset;
-		if (myOffset > 0xFFFF) { 
-			std::cout << "FATAL: node pointer is too large" << std::endl;
-			return false;
-		}
-		else {
-			m_data.putUint16(childPtrOffset+2+2*childNum, myOffset);
-		}
+	return o;
+}
+
+uint32_t largestOffset(const std::vector<uint32_t> & src, uint32_t gap) {
+	if (src.size() < 2)
+		return 0;
+	uint32_t first = *src.begin();
+	uint32_t o = 0;
+	std::vector<uint32_t>::const_iterator end(src.end());
+	std::vector<uint32_t>::const_iterator it(src.begin()+1);
+	for(uint32_t cg = gap; it != end; ++it, cg += gap) {
+		o = std::max<uint32_t>((*it-first)- cg, o);
 	}
-	return true;
+	return o;
 }
 
+
 unsigned int
 CompactStaticTrieCreationNode::createNewNode(
     const sserialize::Static::TrieNodeCreationInfo& nodeInfo, UByteArrayAdapter & destination) {
-
-	uint32_t putPtr = destination.tellPutPtr();
-
-	//change this later if ptr len is not constant
-	uint8_t childPtrLen = 2;
-
-	uint32_t childrenCount = nodeInfo.childChars.size();
-
-	if (childrenCount > 0xFFF) {
-		std::cout << "Error: too many children" << std::endl;
-		return CompactStaticTrieCreationNode::TOO_MANY_CHILDREN;
-	}
+    uint32_t putPtr = destination.tellPutPtr();
+    
+	uint32_t header = 0;
 	
-	//Size of a character in the array length of the children array
-	uint16_t nodeHeader = nodeInfo.indexTypes << 4;
-	if (nodeInfo.charWidth == 2)
-		nodeHeader |= 0x8000;
+	uint32_t charBits = CompactUintArray::minStorageBits(nodeInfo.childChars.back());
 	
-	if (nodeInfo.mergeIndex)
-		nodeHeader |= 0x4000;
-
-	if (childrenCount > 0xF) {
-		nodeHeader |= 0x2000;
-		nodeHeader |= (childrenCount >> 8) & 0xF;
-		destination.putUint16(nodeHeader);
-		destination.putUint8(childrenCount & 0xFF);
+	uint32_t ptrGap = smallestGap(nodeInfo.childPtrs);
+	uint32_t ptrOffset = 0;
+	if (nodeInfo.childrenCount > 2) {
+		ptrOffset = largestOffset(nodeInfo.childPtrs, ptrGap);
 	}
-	else {
-		nodeHeader |= childrenCount;
-		destination.putUint16(nodeHeader);
+	else if (nodeInfo.childrenCount == 2) {
+		ptrOffset = nodeInfo.childPtrs.back() -  nodeInfo.childPtrs.front();
 	}
+	uint32_t ptrBits = CompactUintArray::minStorageBits(ptrOffset);
 	
-	//Possibly push our node string
-	uint32_t nodeStrSize = 0;
-	if (nodeInfo.nodeStr.size() > 0) {
-		//push the string with string length
-		std::string::const_iterator nodeStrIt = nodeInfo.nodeStr.begin();
-		utf8::next(nodeStrIt, nodeInfo.nodeStr.end()); //remove the first char as that one is already in our parent
-		std::string stnodeStr;
-		for(; nodeStrIt != nodeInfo.nodeStr.end(); nodeStrIt++) stnodeStr += *nodeStrIt;
-		
-		nodeStrSize = stnodeStr.size();
-		if (nodeStrSize <= 0xFF) {
-			destination.putUint8(nodeStrSize);
-		}
-		else {
-			std::cout << "node string is too long: " << nodeInfo.nodeStr << std::endl;
-			return CompactStaticTrieCreationNode::NODE_STRING_TOO_LONG;
-		}
-		//Node string (not null terminated)
-
-		for(std::string::iterator i = stnodeStr.begin(); i != stnodeStr.end(); i++) {
-			destination.putUint8(static_cast<uint8_t>(*i));
-		}
-	}
-	else { // no nodestring there
-		destination.putUint8(0);
-	}
-
-	//Push the child chars with dummy child pointers
-	if (childrenCount > 0) {
-
-		if (nodeInfo.charWidth == 2) {
-			for(unsigned int i=0; i < childrenCount; i++) {
-				destination.putUint16(nodeInfo.childChars[i]);
-			}
-		}
-		else {
-			for(unsigned int i=0; i < childrenCount; i++) {
-				destination.putUint8(nodeInfo.childChars[i]);
-			}
-		}
-
-		//dummy pointer values
-		for(unsigned int i = 0; i < 4; i++)
-			destination.putUint8(0); //push the first child
-		for(unsigned int i=1; i < childrenCount; i++) {
-			for(unsigned int j = 0; j < childPtrLen; j++)
-				destination.putUint8(0);
-		}
-	}
+	uint32_t mergeIndex = (nodeInfo.mergeIndex ? 0x1 : 0x0);
 	
 	//Push index pointers
 	std::deque<uint32_t> idxPtrs;
@@ -327,33 +261,77 @@ CompactStaticTrieCreationNode::createNewNode(
 	}
 
 	std::deque<uint8_t> indexPtrsData;
-	uint8_t bpn = CompactUintArray::createFromDeque(idxPtrs, indexPtrsData);
+	uint8_t indexBits = CompactUintArray::createFromDeque(idxPtrs, indexPtrsData);
 	
-	if (!bpn) {
+	if (!indexBits) {
 		return CompactStaticTrieCreationNode::INDEX_PTR_FAILED;
 	}
 	
-	destination[putPtr] |= bpn-1;
-	destination.put(indexPtrsData);
+	uint32_t childCountFlag = (nodeInfo.childrenCount > 0x7 ? 0x1 : 0x0);
+	uint32_t childCount = (childCountFlag ?  nodeInfo.childrenCount : (nodeInfo.childrenCount << 8));
+
+	//assemble header
+	header |= charBits << CompactTrieNodePrivate::HS_CHILD_CHAR_BITS;
+	header |= ptrBits << CompactTrieNodePrivate::HS_CHILD_PTR_BITS;
+	header |= indexBits << CompactTrieNodePrivate::HS_INDEX_BITS;
+	header |= mergeIndex << CompactTrieNodePrivate::HS_MERGE_INDEX;
+	header |= nodeInfo.indexTypes << CompactTrieNodePrivate::HS_INDEX_TYPES;
+	header |= childCountFlag << CompactTrieNodePrivate::HS_CHILD_COUNT_FLAG;
+	header |= (nodeInfo.childrenCount << (childCountFlag ? 0 : 8) );
+
+	//header is completeley assembled
+	if (childCountFlag) {
+		destination.putUint32(header);
+	}
+	else {
+		destination.putUint24(header >> 8);
+	}
+	
+	//put the dummy string length
+	uint8_t & nodeStrLenDestination = destination[destination.tellPutPtr()];
+	destination.putUint8(0);
+	
+	//first child ptr
+	
+	uint32_t childPtrDiff = 0;
+	if (nodeInfo.childrenCount) {
+		destination.putVlPackedUint32(nodeInfo.childPtrs.front());
+		if (nodeInfo.childrenCount > 2) {
+			childPtrDiff = smallestGap(nodeInfo.childPtrs);
+			
+		}
+	}
+
+	
+	//Possibly push our node string
+	
+	if (nodeInfo.nodeStr.size() > 0) {
+		//push the string with string length
+		std::string::const_iterator nodeStrIt = nodeInfo.nodeStr.begin();
+		utf8::next(nodeStrIt, nodeInfo.nodeStr.end()); //remove the first char as that one is already in our parent
+		std::string stnodeStr(nodeStrIt, nodeInfo.nodeStr.end());
+		
+		if (stnodeStr.size() <= 0xFF) {
+			nodeStrLenDestination = stnodeStr.size();
+		}
+		else {
+			std::cout << "node string is too long: " << nodeInfo.nodeStr << std::endl;
+			return CompactStaticTrieCreationNode::NODE_STRING_TOO_LONG;
+		}
+		//Node string (not null terminated)
+
+		for(std::string::iterator i = stnodeStr.begin(); i != stnodeStr.end(); i++) {
+			destination.putUint8(static_cast<uint8_t>(*i));
+		}
+	}
+
+
 
 	return CompactStaticTrieCreationNode::NO_ERROR;
 }
 
 unsigned int CompactStaticTrieCreationNode::appendNewNode(const sserialize::Static::TrieNodeCreationInfo& nodeInfo, UByteArrayAdapter & destination) {
-	uint32_t putPtr = destination.tellPutPtr();
-	unsigned int errors = CompactStaticTrieCreationNode::createNewNode(nodeInfo, destination);
-	UByteArrayAdapter nodeStart = destination;
-	nodeStart.setPutPtr(putPtr);
-	if (nodeInfo.childChars.size() > 0) {
-		CompactStaticTrieCreationNode creationNode(nodeStart);
-		for(size_t i = 0; i < nodeInfo.childPtrs.size(); i++) {
-			if (!creationNode.setChildPointer(i, nodeInfo.childPtrs[i])) {
-				errors |= CHILD_PTR_FAILED;
-				break;
-			}
-		}
-	}
-	return errors;
+	return CompactStaticTrieCreationNode::createNewNode(nodeInfo, destination);
 }
 
 unsigned int
diff --git a/sserialize/Static/TrieNodePrivates/CompactTrieNodePrivate.h b/sserialize/Static/TrieNodePrivates/CompactTrieNodePrivate.h
index 261ac38..55cd656 100644
--- a/sserialize/Static/TrieNodePrivates/CompactTrieNodePrivate.h
+++ b/sserialize/Static/TrieNodePrivates/CompactTrieNodePrivate.h
@@ -19,26 +19,26 @@
  *
  * Node layout
  * 
- * ----------------------------------------------------------------------------------------------------------
- * amliiiii|epsSLLLL|LLLLLLLL|SLSLSLSL|SSSSSSSSS|CCCCCCCCCCCC|FCPFCPFCP|CPCPCPCP|  IDXPTRS |SUBTRIEPTR|
- * ----------------------------------------------------------------------------------------------------------
- * 1 byte  | 1 byte | 1 byte | 1 byte | SL byte |(1-2 byte)*l|  4 byte |2*(L-1) |CompactArr|  4 byte  |
- * a = width of the characters (0 => 1 byte, 1 => 2 bytes)
+ * ----------------------------------------------------------------------------------------------------------------
+ * aaaaaccc|cciiiiim|epsSlLLL|LLLLLLLL|SLSLSLSL|FCPFCPFCP|CPDIFFCPDIFF|SSSSSSSSS|CCCCCCCCCC|CPCPCPCPCP|  IDXPTRS |
+ * ----------------------------------------------------------------------------------------------------------------
+ * 3 byte                     | 1 byte | 1 byte | vl32    |    vl32    |SL byte  |CompactArr|CompactArr|CompactArr|
+ * a = bit width in the child-char array
+ * c = bit width in the child ptr array
+ * i = index bits per number count
  * m = node has a merge index
  * e = node has a exact index
  * p = node has a prefix index
  * s = node has a suffix index
  * S = node has a suffixPrefix index
- * i = index bits per number count
  * l = if true, then there's another length byte following
  * L = length of the following char->pointer array
  * SL = length of the string
  * S = the node's string, not null-terminated, encoded as UTF-8, the first char is stored in the parent 
  * C = character (width is determined by a), encoded in UTF-32 (essentially it's just the unicde point)
  * FCP = displacement from the beginning of the tree to the first child node
- * CP = displacement from the beginning of the first child, every childnode-stripe adds a new offset
+ * CPDIFFCPDIFF = minumum diff betwwen child pointers, which is only present if childCount > 2
  * IDXPTR = Pointer to index (offset in index file
- * SUBTRIEPTR = Pointer to the subtrie (offset in trie file)
  */
 
 namespace sserialize {
@@ -47,15 +47,20 @@ namespace Static {
 class CompactStaticTrieCreationNode;
 
 class CompactTrieNodePrivate: public TrieNodePrivate {
+enum {HS_CHILD_COUNT=0, HS_CHILD_COUNT_FLAG=11, HS_INDEX_TYPES=12, HS_MERGE_INDEX=16, HS_INDEX_BITS=17, HS_CHILD_PTR_BITS=22, HS_CHILD_CHAR_BITS=27} HeaderShifts;
+enum {HM_CHILD_COUNT=0x7FF, HM_CHILD_COUNT_FLAG=0x1, HM_INDEX_TYPES=0xF, HM_MERGE_INDEX=0x1, HM_INDEX_BITS=0x1F, HM_CHILD_PTR_BITS=0x1F, HM_CHILD_CHAR_BITS=0x1F} HeaderMasks;
 public:
 	friend class CompactStaticTrieCreationNode;
 protected:
 	UByteArrayAdapter m_data;
 
 	//Node info
+	uint32_t m_header;
 	uint16_t m_childCount;
 	uint8_t m_strLen;
-
+	uint32_t m_childPtrBeginOffset;
+	uint32_t m_childPtrDiff;
+	
 	//data pointers:
 	uint32_t m_strStart;
 	uint32_t m_childArrayStart;
@@ -68,17 +73,20 @@ private:
 	uint32_t getSubTriePtrOffset() const;
 	uint32_t getChildPtrBeginOffset() const;
 	
-	IndexTypes indexTypes() const { return (IndexTypes) (m_data.at(1) >> 4);}
-	uint8_t indexArrBpn() const { return (m_data.at(0) & 0x1F) + 1;}
+	
+	IndexTypes indexTypes() const;
+	uint8_t childPtrBits() const;
+	uint8_t indexPtrBits() const;
+	
 	
 public:
 	CompactTrieNodePrivate(const UByteArrayAdapter & nodeData);
 	~CompactTrieNodePrivate() {}
 
 	virtual uint16_t childCount() const { return m_childCount;}
-	virtual uint8_t charWidth() const { return ((m_data.at(0) & 0x80) >> 7) + 1;}
-	virtual uint8_t strLen() const { return m_strLen; }
-	virtual bool hasMergeIndex() const { return m_data.at(0) & 0x40; }
+	virtual uint8_t charWidth() const;
+	virtual uint8_t strLen() const { return m_strLen;}
+	virtual bool hasMergeIndex() const;
 	virtual bool hasExactIndex() const { return indexTypes() & IT_EXACT;}
 	virtual bool hasPrefixIndex() const { return indexTypes() & IT_PREFIX;}
 	virtual bool hasSuffixIndex() const { return indexTypes() & IT_SUFFIX;}
@@ -116,7 +124,6 @@ public:
 	enum ErrorTypes { NO_ERROR=0, TOO_MANY_CHILDREN=1, NODE_STRING_TOO_LONG=2, CHILD_PTR_FAILED=4, INDEX_PTR_FAILED=8};
 	CompactStaticTrieCreationNode(const UByteArrayAdapter & nodeData);
 	~CompactStaticTrieCreationNode() {}
-	bool setChildPointer(uint32_t childNum, uint32_t offSetFromBeginning);
 	static unsigned int createNewNode(const sserialize::Static::TrieNodeCreationInfo & nodeInfo, UByteArrayAdapter& destination);
 	static unsigned int appendNewNode(const sserialize::Static::TrieNodeCreationInfo& nodeInfo, UByteArrayAdapter& destination);
 	static unsigned int prependNewNode(const sserialize::Static::TrieNodeCreationInfo& nodeInfo, std::deque<uint8_t> & destination);
